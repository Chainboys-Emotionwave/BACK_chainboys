openapi: 3.0.0
info:
  title: K-POP 창작 플랫폼 API
  version: 1.0.0
  description: 웹3 지갑 기반의 팬 콘텐츠 플랫폼 MVP API

servers:
  - url: http://localhost:3000
    description: 로컬 개발 서버

tags:
  - name: 인증
    description: Web3 지갑 기반 인증 관련 API
  - name: 사용자
    description: 사용자 정보 관리 API
  - name: 콘텐츠
    description: 콘텐츠 생성, 조회, 수정, 삭제 및 응원 관련 API
  - name: 챌린지
    description: 챌린지 생성 및 조회 관련 API
  - name: 뱃지
    description: 뱃지 조회 및 관리 API
  - name: 검색
    description: 사용자 및 콘텐츠 검색 관련 API
  - name: 응원 통계
    description: 응원 통계 및 랭킹 관련 API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 HTTP Header의 Authorization 필드에 넣어 인증합니다.
  
  schemas:
    # === 공통 스키마 ===
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: 에러 메시지
          example: "서버 오류가 발생했습니다."
    
    # === 인증 스키마 ===
    SignatureMessageRequest:
      type: object
      required:
        - walletAddress
      properties:
        walletAddress:
          type: string
          description: 사용자의 지갑 주소
          example: "0x742d35Cc6524Bb3b4C0C2d8B7b8b9F8e8C8D7A8B"
    
    SignatureMessageResponse:
      type: object
      properties:
        message:
          type: string
          description: 서명할 메시지
          example: "EmotionWave에 오신것을 환영합니다. 서명하여 신원을 증명하세요. 난수: abc123def456"
    
    VerifySignatureRequest:
      type: object
      required:
        - walletAddress
        - signature
      properties:
        walletAddress:
          type: string
          description: 사용자의 지갑 주소
          example: "0x742d35Cc6524Bb3b4C0C2d8B7b8b9F8e8C8D7A8B"
        signature:
          type: string
          description: 지갑으로 서명한 메시지
          example: "0x1234567890abcdef..."
    
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT 인증 토큰
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            userNum:
              type: integer
              description: 사용자 번호
              example: 1
            userWalletAddress:
              type: string
              description: 지갑 주소
              example: "0x742d35Cc6524Bb3b4C0C2d8B7b8b9F8e8C8D7A8B"
            role:
              type: string
              description: 사용자 권한
              example: "user"
    
    # === 사용자 스키마 ===
    User:
      type: object
      properties:
        userNum:
          type: integer
          description: 사용자 고유 번호
          example: 1
        userName:
          type: string
          description: 사용자 이름
          example: "K-POP_Fan_123"
        userWalletAddress:
          type: string
          description: 지갑 주소
          example: "0x742d35Cc6524Bb3b4C0C2d8B7b8b9F8e8C8D7A8B"
        profileImageNum:
          type: integer
          description: 프로필 이미지 번호
          example: 1
        profileImageBackNum:
          type: integer
          description: 배경 이미지 번호
          example: 2
    
    UpdateUserRequest:
      type: object
      properties:
        userName:
          type: string
          description: 변경할 사용자 이름
          example: "NewUserName"
        profileImageNum:
          type: integer
          description: 변경할 프로필 이미지 번호
          example: 3
        profileImageBackNum:
          type: integer
          description: 변경할 배경 이미지 번호
          example: 5

    # === 뱃지 스키마 ===
    Badge:
      type: object
      properties:
        badgesNum:
          type: integer
          description: 뱃지 고유 번호
          example: 1
        badgesName:
          type: string
          description: 뱃지 이름
          example: "새싹 주민"
        badgesDescription:
          type: string
          description: 뱃지 설명
          example: "커뮤니티에 처음 가입한 주민"
    
    CreateBadgeRequest:
      type: object
      required:
        - badgesName
        - badgesDescription
      properties:
        badgesName:
          type: string
          description: 뱃지 이름
          example: "성장 주민"
        badgesDescription:
          type: string
          description: "게시물을 1개 이상 작성한 주민"
  
  # === 콘텐츠 스키마 ===
    Content:
      type: object
      properties:
        conNum:
          type: integer
          description: 콘텐츠 고유 번호
          example: 1
        conTitle:
          type: string
          description: 콘텐츠 제목
          example: "내가 만든 BTS 팬아트"
        conDescription:
          type: string
          description: 콘텐츠 설명
          example: "디지털 드로잉으로 그린 BTS 멤버들"
        conUrl:
          type: string
          description: 콘텐츠 URL
          example: "https://example.com/fanart1.jpg"
        conDate:
          type: string
          format: date-time
          description: 콘텐츠 생성일
          example: "2024-12-28T10:30:00.000Z"
        conViews:
          type: integer
          description: 조회수
          example: 1500
        conSupports:
          type: integer
          description: 응원 수
          example: 234
        userNum:
          type: integer
          description: 작성자 번호
          example: 42
        userName:
          type: string
          description: 작성자 이름 (조회시에만 포함)
          example: "ArtistFan"
        cateNum:
          type: integer
          description: 카테고리 번호
          example: 1
        challNum:
          type: integer
          nullable: true
          description: 챌린지 번호 (선택사항)
          example: null
    
    ContentList:
      type: object
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        totalCount:
          type: integer
          description: 전체 콘텐츠 수
          example: 150
    
    CreateContentRequest:
      type: object
      required:
        - conTitle
        - conDescription
        - cateNum
      properties:
        conTitle:
          type: string
          description: 콘텐츠 제목
          example: "ITZY 신곡 리액션"
        conDescription:
          type: string
          description: 콘텐츠 설명
          example: "ITZY의 새로운 타이틀곡에 대한 첫 반응!"
        conUrl:
          type: string
          description: 콘텐츠 URL (선택사항)
          example: "https://example.com/itzy-reaction.mp4"
        cateNum:
          type: integer
          description: 카테고리 번호
          example: 3
        challNum:
          type: integer
          description: 챌린지 번호 (선택사항)
          example: 7
    
    ContentResponse:
      type: object
      properties:
        message:
          type: string
          description: 응답 메시지
          example: "컨텐츠가 성공적으로 생성되었습니다."
        content:
          $ref: '#/components/schemas/Content'

# === 챌린지 스키마 ===
    Challenge:
      type: object
      properties:
        challNum:
          type: integer
          description: 챌린지 고유 번호
          example: 1
        challName:
          type: string
          description: 챌린지 이름
          example: "2024 K-POP 커버댄스 대회"
        challStartDate:
          type: string
          format: date-time
          description: 챌린지 시작일
          example: "2024-12-01T00:00:00.000Z"
        challEndDate:
          type: string
          format: date-time
          description: 챌린지 종료일
          example: "2024-12-31T23:59:59.000Z"
        challPrize:
          type: string
          description: 챌린지 상금/상품
          example: "1등 100만원, 2등 50만원"
        challDescription:
          type: string
          description: 챌린지 설명
          example: "올해 가장 인기있는 K-POP 곡으로 커버댄스를 만들어보세요!"
    
    CreateChallengeRequest:
      type: object
      required:
        - challName
        - challStartDate
        - challEndDate
        - challPrize
        - challDescription
      properties:
        challName:
          type: string
          description: 챌린지 이름
          example: "신년 K-POP 보컬 챌린지"
        challStartDate:
          type: string
          format: date
          description: 챌린지 시작일 (YYYY-MM-DD)
          example: "2025-01-01"
        challEndDate:
          type: string
          format: date
          description: 챌린지 종료일 (YYYY-MM-DD)
          example: "2025-01-31"
        challPrize:
          type: string
          description: 챌린지 상금/상품
          example: "1등 200만원"
        challDescription:
          type: string
          description: 챌린지 설명
          example: "새해를 맞아 K-POP 보컬 실력을 뽐내보세요!"
    
    ChallengeResponse:
      type: object
      properties:
        message:
          type: string
          description: 응답 메시지
          example: "챌린지가 성공적으로 등록되었습니다."
        challenge:
          $ref: '#/components/schemas/Challenge'

# === 검색 스키마 ===
    SearchUserResult:
      type: object
      properties:
        userNum:
          type: integer
          description: 사용자 번호
          example: 42
        userName:
          type: string
          description: 사용자 이름
          example: "BTS_ARMY_Forever"
        profileImageNum:
          type: integer
          description: 프로필 이미지 번호
          example: 1
        profileImageBackNum:
          type: integer
          description: 배경 이미지 번호
          example: 2
    
    SearchContentResult:
      type: object
      properties:
        conNum:
          type: integer
          description: 콘텐츠 번호
          example: 78
        conTitle:
          type: string
          description: 콘텐츠 제목
          example: "BTS 다이너마이트 커버"
        conDescription:
          type: string
          description: 콘텐츠 설명
          example: "BTS의 대표곡 다이너마이트를 불러봤습니다"
        conUrl:
          type: string
          description: 콘텐츠 URL
          example: "https://example.com/bts-cover.mp4"
        conDate:
          type: string
          format: date-time
          description: 콘텐츠 생성일
          example: "2024-12-20T10:00:00.000Z"
        conViews:
          type: integer
          description: 조회수
          example: 1200
        conSupports:
          type: integer
          description: 응원 수
          example: 89
        userNum:
          type: integer
          description: 작성자 번호
          example: 15
        cateNum:
          type: integer
          description: 카테고리 번호
          example: 2
        challNum:
          type: integer
          nullable: true
          description: 챌린지 번호
          example: null
    
    TotalSearchResult:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/SearchUserResult'
        contents:
          type: array
            items:
              $ref: '#/components/schemas/SearchContentResult'

# === 응원 통계 스키마 ===
    SupportStats:
      type: object
      properties:
        totalSupportsCount:
          type: integer
          description: 전체 응원 수
          example: 15420
        weeklySupportsCount:
          type: integer
          description: 주간 응원 수
          example: 892
        totalUniqueReceivers:
          type: integer
          description: 응원을 받은 총 사용자 수
          example: 234
    
    SupportRanking:
      type: object
      properties:
        userNum:
          type: integer
          description: 사용자 번호
          example: 42
        totalSupports:
          type: integer
          description: 받은 응원 수
          example: 1250

paths:
  # === 인증 API ===
  /api/auth/request-message:
    post:
      summary: 서명 메시지 요청
      description: Web3 지갑 로그인을 위한 서명 메시지를 요청합니다.
      tags: 
        - 인증
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureMessageRequest'
      responses:
        200:
          description: 서명 메시지 반환 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureMessageResponse'
        400:
          description: 잘못된 요청 (지갑 주소 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "지갑 주소가 필요합니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/verify-signature:
    post:
      summary: 서명 검증 및 로그인
      description: 지갑 서명을 검증하고 JWT 토큰을 발급받습니다.
      tags:
        - 인증
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySignatureRequest'
      responses:
        200:
          description: 로그인 성공, JWT 토큰 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: 잘못된 요청 (지갑 주소 또는 서명 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "지갑 주소와 서명이 필요합니다."
        401:
          description: 인증 실패 (유효하지 않은 서명)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "유효하지 않은 서명입니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # === 사용자 API ===
  /api/users/me:
    get:
      summary: 내 정보 조회
      description: 현재 로그인한 사용자의 정보를 조회합니다.
      tags:
        - 사용자
      security:
        - bearerAuth: []
      responses:
        200:
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "로그인이 필요합니다!"
        404:
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "내 정보를 불러올 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: 내 정보 수정
      description: 현재 로그인한 사용자의 프로필 정보를 수정합니다.
      tags:
        - 사용자
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: 사용자 정보 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "내 정보를 갱신할 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{userNum}:
    get:
      summary: 특정 사용자 조회
      description: 사용자 번호로 특정 사용자의 공개 정보를 조회합니다.
      tags:
        - 사용자
      parameters:
        - in: path
          name: userNum
          required: true
          schema:
            type: integer
          description: 조회할 사용자의 번호
          example: 123
      responses:
        200:
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "사용자를 찾을 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  # === 뱃지 API ===
  /api/badges/me:
    get:
      summary: 내 뱃지 목록 조회
      description: 현재 로그인한 사용자가 획득한 뱃지 목록을 조회합니다.
      tags:
        - 뱃지
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 내 뱃지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/badges/user/{userNum}:
    get:
      summary: 특정 사용자의 뱃지 목록 조회
      description: 사용자 번호로 해당 사용자가 획득한 뱃지 목록을 조회합니다.
      tags:
        - 뱃지
      parameters:
        - in: path
          name: userNum
          required: true
          schema:
            type: integer
          description: 조회할 사용자의 번호
          example: 1
      responses:
        '200':
          description: 사용자 뱃지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/badges:
    get:
      summary: 모든 뱃지 목록 조회 (관리자)
      description: 시스템에 등록된 모든 뱃지 목록을 조회합니다.
      tags:
        - 뱃지
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 모든 뱃지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: 뱃지 생성 (관리자)
      description: 새로운 뱃지를 시스템에 추가합니다.
      tags:
        - 뱃지
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBadgeRequest'
      responses:
        '201':
          description: 뱃지 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/badges/{badgesNum}:
    put:
      summary: 뱃지 수정 (관리자)
      description: 기존 뱃지의 정보를 수정합니다.
      tags:
        - 뱃지
      security:
        - bearerAuth: []
      parameters:
        - name: badgesNum
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBadgeRequest'
      responses:
        '200':
          description: 뱃지 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 뱃지를 찾을 수 없음

    delete:
      summary: 뱃지 삭제 (관리자)
      description: 시스템에서 뱃지를 삭제합니다.
      tags:
        - 뱃지
      security:
        - bearerAuth: []
      parameters:
        - name: badgesNum
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 뱃지 삭제 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 뱃지를 찾을 수 없음

# === 콘텐츠 API ===
  /api/contents:
    get:
      summary: 전체 콘텐츠 조회
      description: 모든 콘텐츠를 정렬 옵션과 페이지네이션으로 조회합니다.
      tags:
        - 콘텐츠
      parameters:
        - in: query
          name: sort
          schema:
            type: string
            enum: [latest, popular-supports, popular-views]
          description: 정렬 방식
          example: latest
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
          description: 페이지당 결과 수
          example: 10
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: 시작 위치
          example: 0
      responses:
        200:
          description: 콘텐츠 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentList'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: 콘텐츠 생성
      description: 새로운 콘텐츠를 작성합니다. 로그인이 필요합니다.
      tags:
        - 콘텐츠
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
      responses:
        201:
          description: 콘텐츠 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "컨텐츠 생성 중 서버 오류가 발생했습니다."

  /api/contents/me:
    get:
      summary: 내 콘텐츠 조회
      description: 현재 로그인한 사용자가 작성한 콘텐츠를 조회합니다.
      tags:
        - 콘텐츠
      security:
        - bearerAuth: []
      responses:
        200:
          description: 내 콘텐츠 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "콘텐츠를 찾을 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/contents/{conNum}:
    get:
      summary: 특정 콘텐츠 조회
      description: 콘텐츠 번호로 개별 콘텐츠를 조회합니다. 조회수가 자동으로 증가합니다.
      tags:
        - 콘텐츠
      parameters:
        - in: path
          name: conNum
          required: true
          schema:
            type: integer
          description: 콘텐츠 번호
          example: 123
      responses:
        200:
          description: 콘텐츠 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "콘텐츠를 찾을 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: 콘텐츠 수정
      description: 본인이 작성한 콘텐츠를 수정합니다.
      tags:
        - 콘텐츠
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: conNum
          required: true
          schema:
            type: integer
          description: 수정할 콘텐츠 번호
          example: 156
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
      responses:
        200:
          description: 콘텐츠 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "컨텐츠가 성공적으로 갱신되었습니다."
                  content:
                    $ref: '#/components/schemas/Content'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: 본인의 콘텐츠가 아님
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: 콘텐츠 삭제
      description: 본인이 작성한 콘텐츠를 삭제합니다.
      tags:
        - 콘텐츠
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: conNum
          required: true
          schema:
            type: integer
          description: 삭제할 콘텐츠 번호
          example: 156
      responses:
        200:
          description: 콘텐츠 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "컨텐츠가 성공적으로 삭제되었습니다."
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "컨텐츠를 찾을 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/contents/creator/{userNum}:
    get:
      summary: 특정 사용자의 콘텐츠 조회
      description: 사용자 번호로 해당 사용자가 작성한 모든 콘텐츠를 조회합니다.
      tags:
        - 콘텐츠
      parameters:
        - in: path
          name: userNum
          required: true
          schema:
            type: integer
          description: 사용자 번호
          example: 42
      responses:
        200:
          description: 사용자 콘텐츠 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/contents/challenge/{challNum}:
    get:
      summary: 챌린지별 콘텐츠 조회
      description: 챌린지 번호로 해당 챌린지에 참여한 모든 콘텐츠를 조회합니다.
      tags:
        - 콘텐츠
      parameters:
        - in: path
          name: challNum
          required: true
          schema:
            type: integer
          description: 챌린지 번호
          example: 5
      responses:
        200:
          description: 챌린지 콘텐츠 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/contents/category/{cateNum}:
    get:
      summary: 카테고리별 콘텐츠 조회
      description: 카테고리 번호로 해당 카테고리의 모든 콘텐츠를 조회합니다.
      tags:
        - 콘텐츠
      parameters:
        - in: path
          name: cateNum
          required: true
          schema:
            type: integer
          description: 카테고리 번호 (1:팬아트, 2:커버댄스, 3:커버보컬, 4:리액션, 5:기타)
          example: 1
      responses:
        200:
          description: 카테고리 콘텐츠 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        404:
          description: 콘텐츠를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/contents/{conNum}/support:
    post:
      summary: 콘텐츠 응원하기
      description: 특정 콘텐츠에 응원을 보냅니다. 본인이 작성한 콘텐츠는 응원할 수 없습니다.
      tags:
        - 콘텐츠
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: conNum
          required: true
          schema:
            type: integer
          description: 응원할 콘텐츠 번호
          example: 123
      responses:
        200:
          description: 응원 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "성공적으로 응원이 등록되었습니다."
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: 자신의 콘텐츠는 응원할 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "자신의 콘텐츠는 응원할 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# === 챌린지 API ===
  /api/challenges:
    get:
      summary: 전체 챌린지 조회
      description: 모든 챌린지 목록을 조회합니다.
      tags:
        - 챌린지
      responses:
        200:
          description: 챌린지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: 챌린지 생성 (관리자 전용)
      description: 새로운 챌린지를 생성합니다. 관리자 권한이 필요합니다.
      tags:
        - 챌린지
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChallengeRequest'
      responses:
        201:
          description: 챌린지 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeResponse'
        401:
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: 관리자 권한 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "관리자만 챌린지를 등록할 수 있습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/challenges/active:
    get:
      summary: 활성 챌린지 조회
      description: 현재 진행 중인 챌린지만 조회합니다.
      tags:
        - 챌린지
      responses:
        200:
          description: 활성 챌린지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/challenges/{challNum}:
    get:
      summary: 특정 챌린지 조회
      description: 챌린지 번호로 개별 챌린지 정보를 조회합니다.
      tags:
        - 챌린지
      parameters:
        - in: path
          name: challNum
          required: true
          schema:
            type: integer
          description: 챌린지 번호
          example: 1
      responses:
        200:
          description: 챌린지 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        404:
          description: 챌린지를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "챌린지를 찾을 수 없습니다."
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# === 검색 API ===
  /api/search:
    get:
      summary: 통합 검색
      description: 사용자와 콘텐츠를 모두 검색합니다.
      tags:
        - 검색
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: 검색할 키워드
          example: "BTS"
      responses:
        200:
          description: 통합 검색 결과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalSearchResult'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/search/users:
    get:
      summary: 사용자 검색
      description: 사용자 이름으로 사용자를 검색합니다.
      tags:
        - 검색
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: 검색할 사용자 이름
          example: "ARMY"
      responses:
        200:
          description: 사용자 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchUserResult'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/search/contents:
    get:
      summary: 콘텐츠 검색
      description: 콘텐츠 제목이나 설명으로 콘텐츠를 검색합니다.
      tags:
        - 검색
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: 검색할 키워드
          example: "댄스"
      responses:
        200:
          description: 콘텐츠 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchContentResult'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# === 응원 통계 API ===
  /api/supports:
    get:
      summary: 전체 응원 통계
      description: 플랫폼 전체의 응원 통계를 조회합니다.
      tags:
        - 응원 통계
      responses:
        200:
          description: 전체 응원 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportStats'
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "서버 오류 : 응원 통계 조회 실패"

  /api/supports/total:
    get:
      summary: 총 응원 랭킹
      description: 전체 기간 동안 응원을 많이 받은 사용자 랭킹을 조회합니다. (상위 10명)
      tags:
        - 응원 통계
      parameters:
        - in: query
          name: cateNum
          schema:
            type: integer
          description: 카테고리 번호 (선택사항, 없으면 전체 카테고리)
          example: 1
      responses:
        200:
          description: 총 응원 랭킹 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportRanking'
                example:
                  - userNum: 42
                    totalSupports: 1250
                  - userNum: 78
                    totalSupports: 987
                  - userNum: 156
                    totalSupports: 823
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "서버 오류 : 전체 응원 조회 실패"

  /api/supports/weekly:
    get:
      summary: 주간 응원 랭킹
      description: 최근 7일간 응원을 많이 받은 사용자 랭킹을 조회합니다. (상위 10명)
      tags:
        - 응원 통계
      parameters:
        - in: query
          name: cateNum
          schema:
            type: integer
          description: 카테고리 번호 (선택사항, 없으면 전체 카테고리)
          example: 2
      responses:
        200:
          description: 주간 응원 랭킹 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportRanking'
                example:
                  - userNum: 89
                    totalSupports: 156
                  - userNum: 23
                    totalSupports: 134
                  - userNum: 67
                    totalSupports: 112
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "서버 오류 : 주간 응원 조회 실패"
